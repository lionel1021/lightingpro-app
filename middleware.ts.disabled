import { NextRequest, NextResponse } from 'next/server'
import createIntlMiddleware from 'next-intl/middleware'

// 创建国际化中间件
const intlMiddleware = createIntlMiddleware({
  locales: ['zh', 'en'],
  defaultLocale: 'zh',
  localeDetection: true
})

// 简单的认证中间件
export function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl

  // 对于API路由，跳过国际化处理
  if (pathname.startsWith('/api/') || pathname.startsWith('/_next/') || pathname.includes('.')) {
    return authMiddleware(request)
  }

  // 首先处理国际化
  const intlResponse = intlMiddleware(request)
  if (intlResponse) {
    return intlResponse
  }

  return authMiddleware(request)
}

function authMiddleware(request: NextRequest) {
  const { pathname } = request.nextUrl

  // 受保护的API路由
  const protectedApiRoutes = [
    '/api/upload',
    '/api/admin',
    '/api/analytics',
    '/api/affiliate/generate'
  ]

  // 检查是否为受保护的API路由
  const isProtectedApi = protectedApiRoutes.some(route => 
    pathname.startsWith(route)
  )

  if (isProtectedApi) {
    // 检查认证token
    const token = request.cookies.get('auth-token') || 
                 request.headers.get('authorization')

    if (!token) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      )
    }

    // 简单的token验证（生产环境需要更复杂的验证）
    if (typeof token === 'string' && !token.includes('valid')) {
      return NextResponse.json(
        { error: 'Invalid token' },
        { status: 403 }
      )
    }
  }

  // 添加安全头
  const response = NextResponse.next()
  
  response.headers.set('X-Content-Type-Options', 'nosniff')
  response.headers.set('X-Frame-Options', 'DENY')
  response.headers.set('X-XSS-Protection', '1; mode=block')
  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')

  return response
}

export const config = {
  matcher: [
    '/',
    '/(zh|en)/:path*',
    '/api/:path*'
  ],
}